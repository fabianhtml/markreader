---
import Layout from '../layouts/Layout.astro';
import '../styles/global.css';
import ThemeToggle from '../components/ThemeToggle.astro';
import Footer from '../components/Footer.astro';

// Get all markdown files from the content directory
const markdownFiles = await Astro.glob('../content/*.md');

// Sort files alphabetically by title or filename
const sortedFiles = markdownFiles.sort((a, b) => {
  const titleA = a.frontmatter?.title || a.file?.split('/').pop()?.replace('.md', '') || 'unknown';
  const titleB = b.frontmatter?.title || b.file?.split('/').pop()?.replace('.md', '') || 'unknown';
  return titleA.localeCompare(titleB);
});

// SEO metadata
const title = "MarkReader";
const description = "Un lector de Markdown simple";
---

<Layout 
  title={title}
  description={description}
  type="website"
  canonicalURL={Astro.url}
>
  <div class="container">
    <header>
      <div class="header-content">
        <h1><a href="/">MarkReader</a></h1>
        <div class="header-buttons">
          <ThemeToggle />
        </div>
      </div>
      <p>Just read</p>
    </header>
    
    <main>
      <h2>Posts:</h2>
      {sortedFiles.length > 0 ? (
        <ul class="document-list">
          {sortedFiles.map((file) => {
            const filename = file.file?.split('/').pop()?.replace('.md', '') || 'unknown';
            const title = file.frontmatter?.title || filename;
            return (
              <li>
                <a href={`/${filename}`} class="title-link">
                  {title}
                  {file.frontmatter?.author && (
                    <span class="author"> Â· {file.frontmatter.author}</span>
                  )}
                </a>
                <div class="meta-info">
                  {file.frontmatter?.description && (
                    <p>{file.frontmatter.description.length > 70 
                        ? `${file.frontmatter.description.substring(0, 70)}...` 
                        : file.frontmatter.description}</p>
                  )}
                </div>
              </li>
            );
          })}
        </ul>
      ) : (
        <p>No documents found. Add markdown files to the <code>src/content</code> directory.</p>
      )}
    </main>
    <Footer />
  </div>

  <script>
    // Theme toggle functionality
    document.addEventListener('DOMContentLoaded', () => {
      const htmlElement = document.documentElement;
      const bodyElement = document.body;
      
      // Check for saved theme preference or use the system preference
      const savedTheme = localStorage.getItem('theme');
      if (savedTheme === 'dark') {
        htmlElement.classList.add('dark-theme');
        htmlElement.classList.remove('light-theme');
        bodyElement.classList.add('dark-theme');
        bodyElement.classList.remove('light-theme');
      } else if (savedTheme === 'light') {
        htmlElement.classList.add('light-theme');
        htmlElement.classList.remove('dark-theme');
        bodyElement.classList.add('light-theme');
        bodyElement.classList.remove('dark-theme');
      } else {
        // If no saved preference, check system preference
        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
          htmlElement.classList.add('dark-theme');
          bodyElement.classList.add('dark-theme');
        } else {
          htmlElement.classList.add('light-theme');
          bodyElement.classList.add('light-theme');
        }
      }
      
      // Listen for system theme changes
      window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
        if (!localStorage.getItem('theme')) {
          // Only apply system preference if user hasn't set a preference
          if (e.matches) {
            htmlElement.classList.add('dark-theme');
            htmlElement.classList.remove('light-theme');
            bodyElement.classList.add('dark-theme');
            bodyElement.classList.remove('light-theme');
          } else {
            htmlElement.classList.add('light-theme');
            htmlElement.classList.remove('dark-theme');
            bodyElement.classList.add('light-theme');
            bodyElement.classList.remove('dark-theme');
          }
        }
      });
    });
  </script>
</Layout>

<style>
  .container {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
  }

  main {
    flex: 1;
  }

  .header-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
  }
  
  .header-buttons {
    display: flex;
    align-items: center;
    gap: 4px;
  }

  .document-list li {
    margin-bottom: 1.8rem;
    padding: 0.5rem 0.8rem;
    background-color: rgba(0, 0, 0, 0.027);
    border-radius: 8px;
  }

  .dark-theme .document-list li {
    background-color: rgba(255, 255, 255, 0.039);
  }

  .document-list li .title-link {
    font-weight: 600;
    font-size: 1.1rem;
    display: block;
    margin-bottom: 0.1rem;
    color: var(--color-link);
    text-decoration: none;
  }

  .document-list li .title-link:hover {
    text-decoration: underline;
  }

  .document-list li .title-link .author {
    font-weight: normal;
    font-style: italic;
    font-size: 0.9rem;
    color: var(--color-secondary);
  }

  .document-list li .meta-info {
    font-size: 0.9rem;
    line-height: 1.3;
    color: var(--color-secondary);
  }

  .document-list li p {
    margin: 0;
  }
</style>
